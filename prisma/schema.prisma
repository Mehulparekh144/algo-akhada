generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  password      String?
  sessions      Session[]
  bookingsUser1 Booking[] @relation("User1Bookings")
  bookingsUser2 Booking[] @relation("User2Bookings")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum BookingStatus {
  PENDING
  ACCEPTED
  CANCELLED
  COMPLETED
}

enum BookingDifficulty {
  NOVICE
  INTERMEDIATE
  EXPERT
}

model Booking {
  id         String            @id @default(cuid())
  date       DateTime
  startTime  DateTime
  user1Id    String
  difficulty BookingDifficulty @default(NOVICE)
  user2Id    String?
  problem1Id String?
  problem2Id String?
  status     BookingStatus     @default(PENDING)
  user1      User              @relation("User1Bookings", fields: [user1Id], references: [id])
  user2      User?             @relation("User2Bookings", fields: [user2Id], references: [id])

  @@unique([user1Id, user2Id])
  @@unique([problem1Id, problem2Id])
}
