generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Difficulty {
  Easy
  Medium
  Hard
}

model Problem {
  titleSlug        String     @id
  title            String?
  difficulty       Difficulty @default(Easy)
  acRate           Float?
  link             String?
  question         String?
  exampleTestcases String?
  hints            String[]   @default([])
  testCases        String[]   @default([])
  bookingsUser1    Booking[]  @relation("Problem1Bookings")
  bookingsUser2    Booking[]  @relation("Problem2Bookings")

  @@map("problem")
}

enum BookingStatus {
  PENDING
  ACCEPTED
  CANCELLED
  COMPLETED
}

enum BookingDifficulty {
  NOVICE
  INTERMEDIATE
  EXPERT
}

model Booking {
  id         String            @id @default(cuid())
  date       DateTime
  startTime  DateTime
  user1Id    String
  difficulty BookingDifficulty @default(NOVICE)
  user2Id    String?
  problem1Id String?
  problem2Id String?
  bothJoined Boolean           @default(false)
  status     BookingStatus     @default(PENDING)
  user1      User              @relation("User1Bookings", fields: [user1Id], references: [id])
  user2      User?             @relation("User2Bookings", fields: [user2Id], references: [id])

  problem1 Problem? @relation("Problem1Bookings", fields: [problem1Id], references: [titleSlug])
  problem2 Problem? @relation("Problem2Bookings", fields: [problem2Id], references: [titleSlug])

  @@map("booking")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  password      String?
  bookingsUser1 Booking[] @relation("User1Bookings")
  bookingsUser2 Booking[] @relation("User2Bookings")

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
